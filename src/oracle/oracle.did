type endpoint = record {
    url: text;
    resolver: text;
};

type init_payload = record {
    endpoints: vec endpoint;
    frequency: nat64;
    chain_id: nat64;
    rpc: text;
};

type subscription = record {
    contract_address: text;
    method: text;
    abi: blob;
};

type subscription_simple = record { text; text };

service : {
    get_address: () -> (variant { Ok: text; Err: text });
    init_candid: (init_payload) -> (variant { Ok: null; Err: text });
    start: () -> (variant { Ok: null; Err: text });
    stop_fetcher: () -> (text);
    subscribe: (text, text) -> (text);

    update_price_manual: (text, text, float64) -> (text);
    set_factory_address: (text) -> (text);
    verify_address: (text, text) -> (variant { Ok: record { text; text }; Err: text });

    get_subscriptions: () -> (vec subscription_simple);
    get_fetcher: () -> (text);
    get_chain_id: () -> (nat64);
    get_rpc: () -> (text);
}
